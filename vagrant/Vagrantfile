# -*- mode: ruby -*-
# vi: set ft=ruby :

# Name:          Vagrantfile
# Purpose:       Configuration file for Istjenesten database server master and slave VM's on Ares
# Author(s):     Nick Hughes
# Created:       2018-vii-25
# Modifications: 2018-vii-?  - 
# Copyright:     (c) Norwegian Meteorological Institute, 2018
# Citing:        https://doi.org/10.5281/zenodo.xxxxxx
#
# License:       This file is part of the BIFROST ice charting system.
#                BIFROST is free software: you can redistribute it and/or modify
#                it under the terms of the GNU General Public License as published by
#                the Free Software Foundation, version 3 of the License.
#                http://www.gnu.org/licenses/gpl-3.0.html
#                This program is distributed in the hope that it will be useful,
#                but WITHOUT ANY WARRANTY without even the implied warranty of
#                MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "polarnix/lubuntu-bionic"
  #config.vm.box = "/home/nicholsh/Documents/Bifrost/Vagrant/lubuntu-bionic.box"  

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"
  # config.vm.network "private_network"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network", bridge: "wlan0"
  
  # Enable host manager and IP resolver
  config.hostmanager.enabled = true
  config.hostmanager.ip_resolver = proc do |vm, resolving_vm|
    if vm.id && Vagrant::Util::Platform.windows?
        `\"#{ENV['VBOX_MSI_INSTALL_PATH']}\\VBoxManage\" guestproperty get #{vm.id} "/VirtualBox/GuestInfo/Net/1/V4/IP"`.split()[1]
    else
        `VBoxManage guestproperty get #{vm.id} "/VirtualBox/GuestInfo/Net/1/V4/IP"`.split()[1]
    end
  end  

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  # 
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "4096"
  #   
  #   # Customize how many CPU we have available
  #   vb.cpus = 2
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL

  # Disable the new default behavior introduced in Vagrant 1.7, to
  # ensure that all Vagrant machines will use the same SSH key pair.
  # See https://github.com/mitchellh/vagrant/issues/5005
  config.ssh.insert_key = false

  # Define 2 virtual machines
  
  # Server
  config.vm.define :istdbmaster do |istdbmaster|
  
    config.vm.provider "virtualbox" do |vb|
      # Display the VirtualBox GUI when booting the machine
      vb.gui = true
  
      # Customize the amount of memory on the VM:
      vb.memory = "1024"
    
      # Customize how many CPU we have available
      vb.cpus = 2

      # Disable USB 2.0
      # vb.customize ["modifyvm", :id, "--usb", "on"]
      # vb.customize ["modifyvm", :id, "--usbehci", "off"]
    end
  
    istdbmaster.vm.hostname = "istdb-master"
    
    istdbmaster.vm.network "private_network", ip: "10.168.33.10"
    istdbmaster.vm.network "forwarded_port", guest: 5432, host: 54320,
      protocol: "tcp"

   # Provision using Ansible on the VM (because Ansible is not available on Windows)
    # See http://www.thisprogrammingthing.com/2015/using-ansible-with-vagrant-and-windows/
    istdbmaster.vm.provision "file", source: "id_rsa", destination: "/home/vagrant/.ssh/id_rsa"
    public_key = File.read("id_rsa.pub")
    istdbmaster.vm.provision "shell", inline: <<-SCRIPT
        echo 'Copying ansible-vm public SSH Keys to the VM'
        chmod 700 /home/vagrant/.ssh
        echo '#{public_key}' >> /home/vagrant/.ssh/authorized_keys
        chmod -R 600 /home/vagrant/.ssh/authorized_keys
        echo 'Host 10.168.*.*' >> /home/vagrant/.ssh/config
        echo 'StrictHostKeyChecking no' >> /home/vagrant/.ssh/config
        echo 'UserKnownHostsFile /dev/null' >> /home/vagrant/.ssh/config
        chmod -R 600 /home/vagrant/.ssh/config
	chown vagrant:vagrant /home/vagrant/.ssh/config
        SCRIPT
    istdbmaster.vm.provision "shell" do |s|
      s.path = "./istjenesten_database_server_master_ansible_provision.sh"
    end
  end

  # Client
  config.vm.define :istdbslave do |istdbslave|

    config.vm.provider "virtualbox" do |vb|
      # Display the VirtualBox GUI when booting the machine
      vb.gui = true
  
      # Customize the amount of memory on the VM:
      vb.memory = "1024"
    
      # Customize how many CPU we have available
      vb.cpus = 2
      
      # Disable USB 2.0
      # vb.customize ["modifyvm", :id, "--usb", "on"]
      # vb.customize ["modifyvm", :id, "--usbehci", "off"]
    end

    istdbslave.vm.hostname = "istdb-slave"

    istdbslave.vm.network "private_network", ip: "10.168.33.20"
    istdbslave.vm.network "forwarded_port", guest: 5432, host: 54321,
      protocol: "tcp"

    # Provision using Ansible on the VM (because Ansible is not available on Windows)
    # See http://www.thisprogrammingthing.com/2015/using-ansible-with-vagrant-and-windows/
    istdbslave.vm.provision "file", source: "id_rsa", destination: "/home/vagrant/.ssh/id_rsa"
    public_key = File.read("id_rsa.pub")
    istdbslave.vm.provision "shell", inline: <<-SCRIPT
        echo 'Copying ansible-vm public SSH Keys to the VM'
        chmod 700 /home/vagrant/.ssh
        echo '#{public_key}' >> /home/vagrant/.ssh/authorized_keys
        chmod -R 600 /home/vagrant/.ssh/authorized_keys
        echo 'Host 10.168.*.*' >> /home/vagrant/.ssh/config
        echo 'StrictHostKeyChecking no' >> /home/vagrant/.ssh/config
        echo 'UserKnownHostsFile /dev/null' >> /home/vagrant/.ssh/config
        chmod -R 600 /home/vagrant/.ssh/config
        chown vagrant:vagrant /home/vagrant/.ssh/config
        SCRIPT

    istdbslave.vm.provision "shell" do |s|
      s.path = "./istjenesten_database_server_slave_ansible_provision.sh"
    end
  end

end
